/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TasksRouteImport } from './routes/tasks'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiTasksRouteImport } from './routes/api.tasks'
import { Route as ApiDemoNamesRouteImport } from './routes/api.demo-names'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'
import { Route as ApiAuthRegisterRouteImport } from './routes/api.auth.register'
import { Route as ApiAuthMeRouteImport } from './routes/api.auth.me'
import { Route as ApiAuthLogoutRouteImport } from './routes/api.auth.logout'
import { Route as ApiAuthLoginRouteImport } from './routes/api.auth.login'

const TasksRoute = TasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTasksRoute = ApiTasksRouteImport.update({
  id: '/api/tasks',
  path: '/api/tasks',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoNamesRoute = ApiDemoNamesRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthRegisterRoute = ApiAuthRegisterRouteImport.update({
  id: '/api/auth/register',
  path: '/api/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthMeRoute = ApiAuthMeRouteImport.update({
  id: '/api/auth/me',
  path: '/api/auth/me',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthLogoutRoute = ApiAuthLogoutRouteImport.update({
  id: '/api/auth/logout',
  path: '/api/auth/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthLoginRoute = ApiAuthLoginRouteImport.update({
  id: '/api/auth/login',
  path: '/api/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/tasks': typeof ApiTasksRoute
  '/api/auth/login': typeof ApiAuthLoginRoute
  '/api/auth/logout': typeof ApiAuthLogoutRoute
  '/api/auth/me': typeof ApiAuthMeRoute
  '/api/auth/register': typeof ApiAuthRegisterRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/tasks': typeof ApiTasksRoute
  '/api/auth/login': typeof ApiAuthLoginRoute
  '/api/auth/logout': typeof ApiAuthLogoutRoute
  '/api/auth/me': typeof ApiAuthMeRoute
  '/api/auth/register': typeof ApiAuthRegisterRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/tasks': typeof TasksRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/tasks': typeof ApiTasksRoute
  '/api/auth/login': typeof ApiAuthLoginRoute
  '/api/auth/logout': typeof ApiAuthLogoutRoute
  '/api/auth/me': typeof ApiAuthMeRoute
  '/api/auth/register': typeof ApiAuthRegisterRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/tasks'
    | '/api/demo-names'
    | '/api/tasks'
    | '/api/auth/login'
    | '/api/auth/logout'
    | '/api/auth/me'
    | '/api/auth/register'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/tasks'
    | '/api/demo-names'
    | '/api/tasks'
    | '/api/auth/login'
    | '/api/auth/logout'
    | '/api/auth/me'
    | '/api/auth/register'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/tasks'
    | '/api/demo-names'
    | '/api/tasks'
    | '/api/auth/login'
    | '/api/auth/logout'
    | '/api/auth/me'
    | '/api/auth/register'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  TasksRoute: typeof TasksRoute
  ApiDemoNamesRoute: typeof ApiDemoNamesRoute
  ApiTasksRoute: typeof ApiTasksRoute
  ApiAuthLoginRoute: typeof ApiAuthLoginRoute
  ApiAuthLogoutRoute: typeof ApiAuthLogoutRoute
  ApiAuthMeRoute: typeof ApiAuthMeRoute
  ApiAuthRegisterRoute: typeof ApiAuthRegisterRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/tasks': {
      id: '/api/tasks'
      path: '/api/tasks'
      fullPath: '/api/tasks'
      preLoaderRoute: typeof ApiTasksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/register': {
      id: '/api/auth/register'
      path: '/api/auth/register'
      fullPath: '/api/auth/register'
      preLoaderRoute: typeof ApiAuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/me': {
      id: '/api/auth/me'
      path: '/api/auth/me'
      fullPath: '/api/auth/me'
      preLoaderRoute: typeof ApiAuthMeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/logout': {
      id: '/api/auth/logout'
      path: '/api/auth/logout'
      fullPath: '/api/auth/logout'
      preLoaderRoute: typeof ApiAuthLogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/login': {
      id: '/api/auth/login'
      path: '/api/auth/login'
      fullPath: '/api/auth/login'
      preLoaderRoute: typeof ApiAuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  TasksRoute: TasksRoute,
  ApiDemoNamesRoute: ApiDemoNamesRoute,
  ApiTasksRoute: ApiTasksRoute,
  ApiAuthLoginRoute: ApiAuthLoginRoute,
  ApiAuthLogoutRoute: ApiAuthLogoutRoute,
  ApiAuthMeRoute: ApiAuthMeRoute,
  ApiAuthRegisterRoute: ApiAuthRegisterRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
